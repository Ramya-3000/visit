Target: xml2info
Function: VTKCommonPluginInfo::SetupDatabase
Declaration: virtual avtDatabase * VTKCommonPluginInfo::SetupDatabase(const char *const *list, int nList, int nBlock);
Definition:
// ****************************************************************************
//  Method: VTKCommonPluginInfo::SetupDatabase
//
//  Purpose:
//      Sets up a VTK database.
//
//  Arguments:
//      list    A list of file names.
//      nList   The number of timesteps in list.
//      nBlocks The number of blocks in the list.
//
//  Returns:    A VTK database from list.
//
//  Programmer: generated by xml2info
//  Creation:   omitted
//
//  Modifications:
//    Brad Whitlock, Mon Oct 22 17:03:44 PDT 2012
//    I changed the code so it switches the interface based on how many domains
//    are present in the 1st file.
//
//    Kathleen Biagas, Fri August 13, 2021
//    Add MTMD for .pvd file types.
//
//    Kathleen Biagas, Fri June 24, 2022
//    Choose type solely based on file extension.
//
// ****************************************************************************

avtDatabase *
VTKCommonPluginInfo::SetupDatabase(const char *const *list,
                                   int nList, int nBlock)
{
    avtDatabase *db = NULL;

    string fn(list[0]);
    size_t pos = fn.find_last_of('.');
    string ext = fn.substr(pos+1);
    if (ext == "pvd")
    {
        dbType = DB_TYPE_MTMD;

        // Only using 1 timestepgroup
        avtMTMDFileFormat **ffl = new avtMTMDFileFormat*[1];
        ffl[0] = new avtPVDFileFormat(fn.c_str(), readOptions);
        avtMTMDFileFormatInterface *inter = new avtMTMDFileFormatInterface(ffl, 1);
        db = new avtGenericDatabase(inter);

        return db;
    }
    else if (ext == "vtm")
    {
        dbType = DB_TYPE_STMD;
        bool isGEOSX = false;
        // test if this is GEOSX by parsing the file and searching for
        // specific elements that should exist
        vtkNew<vtkXMLDataParser> parser;
        parser->SetFileName(list[0]);
        if(parser->Parse())
        {
            vtkXMLDataElement *root = parser->GetRootElement();
            if(root)
            {
                vtkXMLDataElement *mbdsNode = root->GetNestedElement(0);
                vtkXMLDataElement *grid =
                    mbdsNode->FindNestedElementWithNameAndAttribute(
                        "Block", "name", "backgroundGrid");
                if(grid && grid->FindNestedElementWithNameAndAttribute(
                   "Block", "name", "CellElementRegion"))
                {
                    avtSTMDFileFormat **ffl = new avtSTMDFileFormat*[nList];
                    for (int i = 0; i < nList; i++)
                    {
                        ffl[i] = new avtGEOSXFileFormat(list[i], readOptions);
                    }
                    avtSTMDFileFormatInterface *inter
                       = new avtSTMDFileFormatInterface(ffl, nList);
                    db = new avtGenericDatabase(inter);
                    isGEOSX = true;
                }
            }
        }
        if (!isGEOSX)
        {
            avtSTMDFileFormat **ffl = new avtSTMDFileFormat*[nList];
            for (int i = 0; i < nList; i++)
            {
                ffl[i] = new avtVTMFileFormat(list[i], readOptions);
            }
            avtSTMDFileFormatInterface *inter
               = new avtSTMDFileFormatInterface(ffl, nList);
            db = new avtGenericDatabase(inter);
        }
    }
    else if (ext[0] == 'p')
    {
        dbType = DB_TYPE_STMD;

        // STMD case
        avtSTMDFileFormat **ffl = new avtSTMDFileFormat*[nList];
        for (int i = 0; i < nList; i++)
        {
            ffl[i] = new avtPVTKFileFormat(list[i], readOptions);
        }
        avtSTMDFileFormatInterface *inter
           = new avtSTMDFileFormatInterface(ffl, nList);
        db = new avtGenericDatabase(inter);
    }
    else
    {
        dbType = DB_TYPE_STSD;

        // STSD case
        int nTimestep = nList / nBlock;
        avtSTSDFileFormat ***ffl = new avtSTSDFileFormat**[nTimestep];
        for (int i = 0; i < nTimestep; i++)
        {
            ffl[i] = new avtSTSDFileFormat*[nBlock];
            for (int j = 0; j < nBlock; j++)
            {
                ffl[i][j] = new avtVTK_STSDFileFormat(list[i*nBlock + j], readOptions);
            }
        }
        avtSTSDFileFormatInterface *inter
            = new avtSTSDFileFormatInterface(ffl, nTimestep, nBlock);
        db = new avtGenericDatabase(inter);
    }

    return db;
}

Function: VTKCommonPluginInfo::GetDatabaseType
Declaration: DatabaseType VTKCommonPluginInfo::GetDatabaseType();
Definition:
// ****************************************************************************
//  Method:  VTKCommonPluginInfo::GetDatabaseType
//
//  Purpose:
//    Returns the type of a VTK database.
//
//  Programmer:  generated by xml2info
//  Creation:    omitted
//
// ****************************************************************************
DatabaseType
VTKCommonPluginInfo::GetDatabaseType()
{
    return dbType;
}

